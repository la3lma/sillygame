{
  "name": "ticker",
  "version": "0.1.0",
  "dependencies": {},
  "readmeFilename": "README.md",
  "description": "A module for running animation and game loops with browserify.",
  "main": "index.js",
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/ticker.git"
  },
  "keywords": [
    "tick",
    "frames",
    "second",
    "animation",
    "loop",
    "game",
    "events"
  ],
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "license": "MIT",
  "readme": "# ticker #\n\nA module for running animation and game loops with\n[browserify](http://browserify.org/).\n\nYou've probably heard of\n[`requestAnimationFrame`](http://caniuse.com/#feat=requestanimationframe): a\nhelpful method for running animations at higher frame rates than `setInterval`.\nIt works really well for rendering animations to the screen, adjusting the\nspeed to fit your screen refresh rate and battery life, etc.\n\nUnfortunately it's not predictable - it tends to fluctuate quite a\nbit, and leaves you with results either far too fast or too slow depending on\nthe device. You could use setInterval, but that can be unreliable too. Keeping\ntrack of [delta time](http://viget.com/extend/time-based-animation) is a good\nsolution, but it too can behave differently depending on the frame rate.\n\nSo ticker handles running your update loop at a more consistent rate - either\nspeeding it up or slowing it down in response to performance,\n[this way](http://gafferongames.com/game-physics/fix-your-timestep/).\n\n## Installation ##\n\n``` bash\nnpm install ticker\n```\n\n## Usage ##\n\n**ticker = require('ticker')(element, framerate, skips)**\n\nCreates a new ticker instance.\n\n* `element` should either be `window` or the canvas element you're drawing to.\n* `framerate` is the number of frames per second you'd like to tick, and\n  defaults to 60.\n* `skips` is the maximum frames you'd like to skip per render. Defaults to 1.\n  Set to 0 to disable entirely.\n\n**ticker.on('tick', callback)**\n\nEmitted for every frame of logic you should to run.\n\n**ticker.on('draw', callback)**\n\nEmitted for every draw call you should run.\n\n``` javascript\nvar ticker = require('ticker')\n  , canvas = document.createElement('canvas')\n  , ctx = canvas.getContext('2d')\n  , x = 0\n  , y = 0\n\nticker(window, 60).on('tick', function() {\n  x += Math.round(Math.random()*2-1)*10\n  y += Math.round(Math.random()*2-1)*10\n}).on('draw', function() {\n  ctx.fillStyle = 'black'\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n  ctx.fillStyle = 'white'\n  ctx.fillRect(x, y, 10, 10)\n})\n```\n",
  "bugs": {
    "url": "https://github.com/hughsk/ticker/issues"
  },
  "_id": "ticker@0.1.0",
  "dist": {
    "shasum": "6615712e2a0d5714631beade4c90a5ee10c27209"
  },
  "_resolved": "git://github.com/sethvincent/ticker.git#69636b5b421146ccacf2c2667f46ef2743165fb3",
  "_from": "ticker@git://github.com/sethvincent/ticker.git"
}
